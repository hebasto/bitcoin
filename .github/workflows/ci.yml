# Copyright (c) 2023-present The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://opensource.org/license/mit.

name: CI
on:
  # See: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request.
  pull_request:
  # See: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#push.
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  CI_FAILFAST_TEST_LEAVE_DANGLING: 1  # GHA does not care about dangling processes and setting this variable avoids killing the CI script itself on error
  CIRRUS_CACHE_HOST: http://127.0.0.1:12321/ # When using Cirrus Runners this host can be used by the docker `gha` build cache type.
  REPO_USE_CIRRUS_RUNNERS: 'bitcoin/bitcoin' # Use cirrus runners and cache for this repo, instead of falling back to the slow GHA runners

defaults:
  run:
    # Enforce fail-fast behavior for all platforms.
    # See: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

jobs:
  runners:
    name: 'determine runners'
    runs-on: ubuntu-latest
    outputs:
      provider: ${{ steps.runners.outputs.provider }}
    steps:
      - id: runners
        run: |
          if [[ "${REPO_USE_CIRRUS_RUNNERS}" == "${{ github.repository }}" ]]; then
            echo "provider=cirrus" >> "$GITHUB_OUTPUT"
            echo "::notice title=Runner Selection::Using Cirrus Runners"
          else
            echo "provider=gha" >> "$GITHUB_OUTPUT"
            echo "::notice title=Runner Selection::Using GitHub-hosted runners"
          fi

  windows-cross:
    name: 'Linux->Windows cross, no tests'
    needs: runners
    runs-on: ${{ needs.runners.outputs.provider == 'cirrus' && 'ghcr.io/cirruslabs/ubuntu-runner-amd64:24.04-sm' || 'ubuntu-24.04' }}
    if: ${{ vars.SKIP_BRANCH_PUSH != 'true' || github.event_name == 'pull_request' }}

    env:
      FILE_ENV: './ci/test/00_setup_env_win64.sh'
      DANGER_CI_ON_HOST_FOLDERS: 1

    steps:
      - &CHECKOUT
        name: Checkout
        uses: actions/checkout@v5
        with:
          # Ensure the latest merged pull request state is used, even on re-runs.
          ref: &CHECKOUT_REF_TMPL ${{ github.event_name == 'pull_request' && github.ref || '' }}

      - name: Configure environment
        uses: ./.github/actions/configure-environment

      - name: Restore caches
        id: restore-cache
        uses: ./.github/actions/restore-caches

      - name: Configure Docker
        uses: ./.github/actions/configure-docker
        with:
          cache-provider: ${{ needs.runners.outputs.provider }}

      - name: CI script
        run: ./ci/test_run_all.sh

      - name: Save caches
        uses: ./.github/actions/save-caches

      - name: Upload built executables
        uses: actions/upload-artifact@v4
        with:
          name: x86_64-w64-mingw32-executables-${{ github.run_id }}
          path: |
            ${{ env.BASE_BUILD_DIR }}/bin/*.exe
            ${{ env.BASE_BUILD_DIR }}/src/secp256k1/bin/*.exe
            ${{ env.BASE_BUILD_DIR }}/src/univalue/*.exe
            ${{ env.BASE_BUILD_DIR }}/test/config.ini

  windows-native-test:
    name: 'Windows, test cross-built'
    runs-on: windows-2022
    needs: windows-cross

    env:
      PYTHONUTF8: 1
      TEST_RUNNER_TIMEOUT_FACTOR: 40

    steps:
      - *CHECKOUT

      - name: Download built executables
        uses: actions/download-artifact@v5
        with:
          name: x86_64-w64-mingw32-executables-${{ github.run_id }}

      - name: Run bitcoind.exe
        run: ./bin/bitcoind.exe -version

      - &SET_UP_VS
        name: Set up VS Developer Prompt
        shell: pwsh -Command "$PSVersionTable; $PSNativeCommandUseErrorActionPreference = $true; $ErrorActionPreference = 'Stop'; & '{0}'"
        run: |
          $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $installationPath = & $vswherePath -latest -property installationPath
          & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -arch=x64 -no_logo && set" | foreach-object {
            $name, $value = $_ -split '=', 2
            echo "$name=$value" >> $env:GITHUB_ENV
          }

      - name: Check executable manifests
        shell: pwsh -Command "$PSVersionTable; $PSNativeCommandUseErrorActionPreference = $true; $ErrorActionPreference = 'Stop'; & '{0}'"
        run: |
          mt.exe -nologo -inputresource:bin\bitcoind.exe -out:bitcoind.manifest
          Get-Content bitcoind.manifest

          Get-ChildItem -Filter "bin\*.exe" | ForEach-Object {
            $exeName = $_.Name

            # Skip as they currently do not have manifests
            if ($exeName -eq "fuzz.exe" -or $exeName -eq "bench_bitcoin.exe") {
              Write-Host "Skipping $exeName (no manifest present)"
              return
            }

            Write-Host "Checking $exeName"
            & mt.exe -nologo -inputresource:$_.FullName -validate_manifest
          }

      - name: Run unit tests
        # Can't use ctest here like other jobs as we don't have a CMake build tree.
        run: |
          ./bin/test_bitcoin.exe -l test_suite  # Intentionally run sequentially here, to catch test case failures caused by dirty global state from prior test cases.
          ./src/secp256k1/bin/exhaustive_tests.exe
          ./src/secp256k1/bin/noverify_tests.exe
          ./src/secp256k1/bin/tests.exe
          ./src/univalue/object.exe
          ./src/univalue/unitester.exe

      - name: Run benchmarks
        run: ./bin/bench_bitcoin.exe -sanity-check

      - name: Adjust paths in test/config.ini
        shell: pwsh
        run: |
          (Get-Content "test/config.ini") -replace '(?<=^SRCDIR=).*', '${{ github.workspace }}' -replace '(?<=^BUILDDIR=).*', '${{ github.workspace }}' -replace '(?<=^RPCAUTH=).*', '${{ github.workspace }}/share/rpcauth/rpcauth.py' | Set-Content "test/config.ini"
          Get-Content "test/config.ini"

      - name: Set previous release directory
        run: |
          echo "PREVIOUS_RELEASES_DIR=${{ runner.temp }}/previous_releases" >> "$GITHUB_ENV"

      - name: Get previous releases
        run: ./test/get_previous_releases.py --target-dir $PREVIOUS_RELEASES_DIR

      - name: Run functional tests
        env:
          # TODO: Fix the excluded test and re-enable it.
          # feature_unsupported_utxo_db.py fails on windows because of emojis in the test data directory
          EXCLUDE: '--exclude wallet_multiwallet.py,feature_unsupported_utxo_db.py'
          TEST_RUNNER_EXTRA: ${{ github.event_name != 'pull_request' && '--extended' || '' }}
        run: py -3 test/functional/test_runner.py --jobs $NUMBER_OF_PROCESSORS --ci --quiet --tmpdirprefix="$RUNNER_TEMP" --combinedlogslen=99999999 --timeout-factor=$TEST_RUNNER_TIMEOUT_FACTOR $EXCLUDE $TEST_RUNNER_EXTRA
