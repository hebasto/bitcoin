# Copyright (c) 2024-present The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://opensource.org/license/mit/.

if("@CMAKE_CXX_COMPILER_ID@" STREQUAL "Clang")
  # https://clang.llvm.org/docs/SourceBasedCodeCoverage.html#creating-coverage-reports

  # https://llvm.org/docs/CommandGuide/llvm-profdata.html#profdata-merge
  file(GLOB profraw_files "${CMAKE_CURRENT_LIST_DIR}/coverage/*.profraw")
  execute_process(
    COMMAND ${LLVM_PROFDATA_EXECUTABLE} merge ${profraw_files} --output=coverage/all.profdata
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
    COMMAND_ERROR_IS_FATAL ANY
  )
  # https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-show
  set(object_args "")
  foreach(object_file src/test/test_bitcoin src/bitcoind src/test/fuzz/fuzz)
    if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/${object_file})
      list(APPEND object_args "-object=${CMAKE_CURRENT_LIST_DIR}/${object_file}")
    endif()
  endforeach()
  execute_process(
    COMMAND ${LLVM_COV_EXECUTABLE} show -format=html -output-dir=coverage/result
      -Xdemangler=${LLVM_CXXFILT_EXECUTABLE}
      -instr-profile=coverage/all.profdata ${object_args}
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
    COMMAND_ERROR_IS_FATAL ANY
  )
else()
  # Collect the coverage from the unit tests.

  execute_process(
    COMMAND ${LCOV_COMMAND} --capture --directory src --test-name test_bitcoin --output-file test_bitcoin.info
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_COMMAND} --zerocounters --directory src
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_FILTER_COMMAND} test_bitcoin.info test_bitcoin_filtered.info
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_COMMAND} --add-tracefile test_bitcoin_filtered.info --output-file test_bitcoin_filtered.info
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_COMMAND} --add-tracefile baseline_filtered.info --add-tracefile test_bitcoin_filtered.info --output-file test_bitcoin_coverage.info
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${GENHTML_COMMAND} test_bitcoin_coverage.info --output-directory test_bitcoin.coverage
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )

  # Collect the coverage from the functional tests.

  execute_process(
    COMMAND ${LCOV_COMMAND} --capture --directory src --test-name functional-tests --output-file functional_test.info
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_COMMAND} --zerocounters --directory src
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_FILTER_COMMAND} functional_test.info functional_test_filtered.info
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_COMMAND} --add-tracefile functional_test_filtered.info --output-file functional_test_filtered.info
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${LCOV_COMMAND} --add-tracefile baseline_filtered.info --add-tracefile test_bitcoin_filtered.info --add-tracefile functional_test_filtered.info --output-file total_coverage.info
    COMMAND ${GREP_EXECUTABLE} "%"
    COMMAND ${AWK_EXECUTABLE} "{ print substr($3,2,50) \"/\" $5 }"
    OUTPUT_FILE coverage_percent.txt
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
  execute_process(
    COMMAND ${GENHTML_COMMAND} total_coverage.info --output-directory total.coverage
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
  )
endif()
